-- abundantNumbers = [x |x <- [3..28123], x < getDivisorSum x]
abundantNumbers = [x |x <- [3..1000], x < getDivisorSum x]

-- answer = foldl1 (+) [y | y <- [1..28123], cantBeGenerated y]

answer = foldl1 (+) [y | y <- [1..1000], cantBeGenerated y]

main = do 
  putStrLn $ show answer
  putStrLn "^---"


cantBeGenerated :: Int -> Bool

cantBeGenerated n = filter (\x -> elem (n-x) abundantNumbers) (takeWhile (<n) abundantNumbers) == []

    
    


divisorList :: Int -> [(Int, Int)]
divisorList n
  | n == 0 = []
  | otherwise = (n, getDivisorSum n):divisorList (n-1)


-- initial call: getDivisors Int
getDivisorSum :: Int -> Int
getDivisorSum n  = foldl1 (+) [x | x <- [1..((div n 2)+1)], n `mod` x == 0]
